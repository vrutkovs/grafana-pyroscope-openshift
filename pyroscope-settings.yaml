---
# Source: pyroscope/templates/configmap-agent.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-agent-config-pyroscope
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
data:
  config.river: |
    logging {
      level  = "info"
      format = "logfmt"
    }

    pyroscope.write "pyroscope_write" {
      endpoint {
        url = "http://pyroscope.pyroscope.svc.cluster.local.:4040"
      }
    }

    discovery.kubernetes "kubeapiserver" {
      role = "endpoints"
      namespaces {
        names = ["default"]
      }
    }

    discovery.relabel "kubeapiserver" {
      targets = concat(discovery.kubernetes.kubeapiserver.targets)

      rule {
        source_labels = ["__name__"]
        target_label  = "service_name"
        replacement   = "kube-apiserver"
      }
    }

    pyroscope.scrape "kubeapiserver" {
      clustering {
        enabled = true
      }

      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
        server_name = "kubernetes"
        ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        cert_file = "/var/run/secrets/kubeapi-certs/tls.crt"
        key_file = "/var/run/secrets/kubeapi-certs/tls.key"
      }
      scheme = "https"

      targets    = concat(discovery.relabel.kubeapiserver.output)
      forward_to = [pyroscope.write.pyroscope_write.receiver]

      profiling_config {
        profile.memory {
          enabled = true
          path = "/debug/pprof/heap"
        }

        profile.process_cpu {
          enabled = true
          path = "/debug/pprof/profile"
        }

        profile.goroutine {
          enabled = true
          path = "/debug/pprof/goroutine"
        }

        profile.block {
          enabled = false
        }

        profile.mutex {
          enabled = false
        }

        profile.fgprof {
          enabled = false
        }
      }
    }

    discovery.kubernetes "kubelet" {
      role = "endpoints"
      namespaces {
        names = ["kube-system"]
      }
    }

    discovery.relabel "kubelet" {
      targets = concat(discovery.kubernetes.kubelet.targets)

      rule {
        source_labels = ["__name__"]
        target_label  = "service_name"
        replacement   = "kubelet"
      }
    }

    pyroscope.scrape "kubelet" {
      clustering {
        enabled = true
      }

      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
        server_name = "kubernetes"
        ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        cert_file = "/var/run/secrets/kubeapi-certs/tls.crt"
        key_file = "/var/run/secrets/kubeapi-certs/tls.key"
      }
      scheme = "https"

      targets    = concat(discovery.relabel.kubelet.output)
      forward_to = [pyroscope.write.pyroscope_write.receiver]

      profiling_config {
        profile.memory {
          enabled = true
          path = "/debug/pprof/heap"
        }

        profile.process_cpu {
          enabled = true
          path = "/debug/pprof/profile"
        }

        profile.goroutine {
          enabled = true
          path = "/debug/pprof/goroutine"
        }

        profile.block {
          enabled = false
        }

        profile.mutex {
          enabled = false
        }

        profile.fgprof {
          enabled = false
        }
      }
    }
