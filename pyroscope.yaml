---
apiVersion: v1
kind: Namespace
metadata:
  name: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "all"
---
# Source: pyroscope/templates/deployments-statefulsets.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pyroscope
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "all"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pyroscope
      app.kubernetes.io/instance: pyroscope
      app.kubernetes.io/component: "all"
---
# Source: pyroscope/charts/agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pyroscope-agent
  namespace: pyroscope
  labels:
    helm.sh/chart: agent-0.25.0
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "v0.36.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: pyroscope/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pyroscope
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
---
# Source: pyroscope/templates/configmap-agent.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-agent-config-pyroscope
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
data:
  config.river: |
    logging {
      level  = "info"
      format = "logfmt"
    }

    discovery.kubernetes "kubeapiserver" {
      role = "endpoints"
      namespaces {
        names = ["default"]
      }
    }

    pyroscope.scrape "pyroscope_scrape {
      clustering {
        enabled = true
      }

      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
        server_name = "kubernetes"
        ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        cert_file = "/var/run/secrets/kubeapi-certs/tls.crt"
        key_file = "/var/run/secrets/kubeapi-certs/tls.key"
      }
      scheme = "https"

      targets    = concat(discovery.kubernetes.kubeapiserver.targets)
      forward_to = [pyroscope.write.pyroscope_write.receiver]

      profiling_config {
        profile.memory {
          enabled = true
          path = "/debug/pprof/heap"
        }

        profile.process_cpu {
          enabled = true
          path = "/debug/pprof/profile"
        }

        profile.goroutine {
          enabled = false
        }

        profile.block {
          enabled = false
        }

        profile.mutex {
          enabled = false
        }

        profile.fgprof {
          enabled = false
        }
      }
    }

    pyroscope.write "pyroscope_write" {
      endpoint {
        url = "http://pyroscope.pyroscope.svc.cluster.local.:4040"
      }
    }
---
# Source: pyroscope/templates/configmap-overrides.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pyroscope-overrides-config
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
data:
  overrides.yaml: |
    overrides:
      {}
---
# Source: pyroscope/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: pyroscope-config
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    {}
---
# Source: pyroscope/charts/agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pyroscope-agent
  labels:
    helm.sh/chart: agent-0.25.0
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "v0.36.2"
    app.kubernetes.io/managed-by: Helm
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
---
# Source: pyroscope/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pyroscope-pyroscope
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
---
# Source: pyroscope/charts/agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pyroscope-agent
  labels:
    helm.sh/chart: agent-0.25.0
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "v0.36.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pyroscope-agent
subjects:
  - kind: ServiceAccount
    name: pyroscope-agent
    namespace: pyroscope
---
# Source: pyroscope/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pyroscope-pyroscope
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pyroscope-pyroscope
subjects:
  - kind: ServiceAccount
    name: pyroscope
    namespace: pyroscope
---
# Source: pyroscope/charts/agent/templates/cluster_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pyroscope-agent-cluster
  namespace: pyroscope
  labels:
    helm.sh/chart: agent-0.25.0
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "v0.36.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: 'None'
  selector:
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: pyroscope
  ports:
    # Do not include the -metrics suffix in the port name, otherwise metrics
    # can be double-collected with the non-headless Service if it's also
    # enabled.
    #
    # This service should only be used for clustering, and not metric
    # collection.
    - name: http
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: pyroscope/charts/agent/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pyroscope-agent
  namespace: pyroscope
  labels:
    helm.sh/chart: agent-0.25.0
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "v0.36.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: pyroscope
  ports:
    - name: http-metrics
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: pyroscope/templates/memberlist-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pyroscope-memberlist
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: memberlist
      port: 7946
      protocol: TCP
      targetPort: 7946
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    # TODO: Ensure only services that offer memberlist register
    # pyroscope.grafana.com/memberlist: "true"
---
# Source: pyroscope/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: pyroscope
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "all"
spec:
  type: ClusterIP
  ports:
    - port: 4040
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/component: "all"
---
# Source: pyroscope/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: pyroscope-headless
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "all"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 4040
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/component: "all"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pyroscope-agent-anyuid
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:openshift:scc:anyuid
subjects:
- kind: ServiceAccount
  name: pyroscope-agent
  namespace: pyroscope
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pyroscope-agent-cluster-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-reader
subjects:
- kind: ServiceAccount
  name: pyroscope-agent
  namespace: pyroscope
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pyroscope-anyuid
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:openshift:scc:anyuid
subjects:
- kind: ServiceAccount
  name: pyroscope
  namespace: pyroscope
---
# Source: pyroscope/charts/agent/templates/controllers/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana-agent
  namespace: pyroscope
  labels:
    helm.sh/chart: agent-0.25.0
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "v0.36.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: pyroscope-agent
  selector:
    matchLabels:
      app.kubernetes.io/name: agent
      app.kubernetes.io/instance: pyroscope
  template:
    metadata:
      labels:
        app.kubernetes.io/name: agent
        app.kubernetes.io/instance: pyroscope
    spec:
      serviceAccountName: pyroscope-agent
      containers:
        - name: grafana-agent
          image: docker.io/grafana/agent:v0.36.2
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/agent/config.river
            - --storage.path=/tmp/agent
            - --server.http.listen-addr=0.0.0.0:80
            - --cluster.enabled=true
            - --cluster.join-addresses=pyroscope-agent-cluster
          env:
            - name: AGENT_MODE
              value: flow
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 80
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            - name: kubeapi-certs
              mountPath: /var/run/secrets/kubeapi-certs
        - name: config-reloader
          image: docker.io/jimmidyson/configmap-reload:v0.8.0
          args:
            - --volume-dir=/etc/agent
            - --webhook-url=http://localhost:80/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/agent
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      volumes:
        - name: config
          configMap:
            name: grafana-agent-config-pyroscope
        - name: kubeapi-certs
          secret:
            secretName: kubeapi-certs
---
# Source: pyroscope/templates/deployments-statefulsets.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pyroscope
  namespace: pyroscope
  labels:
    helm.sh/chart: pyroscope-1.2.0
    app.kubernetes.io/name: pyroscope
    app.kubernetes.io/instance: pyroscope
    app.kubernetes.io/version: "1.1.5"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "all"
spec:
  serviceName: pyroscope-headless
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pyroscope
      app.kubernetes.io/instance: pyroscope
      app.kubernetes.io/component: "all"
  template:
    metadata:
      annotations:
        checksum/config: e6ec85158006ced43958d67ed176cd045c037cd6858981cffe28e82727c8c0c7
        profiles.grafana.com/cpu.port_name: http2
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/goroutine.port_name: http2
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/memory.port_name: http2
        profiles.grafana.com/memory.scrape: "true"
      labels:
        app.kubernetes.io/name: pyroscope
        app.kubernetes.io/instance: pyroscope
        app.kubernetes.io/component: "all"
        name: "pyroscope"
    spec:
      serviceAccountName: pyroscope
      securityContext:
        fsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      dnsPolicy: ClusterFirst
      containers:
        - name: "pyroscope"
          securityContext:
            {}
          image: "grafana/pyroscope:1.1.5"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=all"
            - "-self-profiling.disable-push=true"
            - "-server.http-listen-port=4040"
            - "-memberlist.cluster-label=pyroscope-pyroscope"
            - "-memberlist.join=dns+pyroscope-memberlist.pyroscope.svc.cluster.local.:7946"
            - "-config.file=/etc/pyroscope/config.yaml"
            - "-runtime-config.file=/etc/pyroscope/overrides/overrides.yaml"
            - "-log.level=debug"
          ports:
            - name: http2
              containerPort: 4040
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http2
              scheme: HTTP
          volumeMounts:
            - name: config
              mountPath: /etc/pyroscope/config.yaml
              subPath: config.yaml
            - name: overrides-config
              mountPath: /etc/pyroscope/overrides/
            - name: data
              mountPath: /data
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: pyroscope-config
        - name: overrides-config
          configMap:
            name: pyroscope-overrides-config
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: kubeapi-certs
  namespace: pyroscope
data:
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaekNDQWsrZ0F3SUJBZ0lJTEZSS0xqYmsyUGN3RFFZSktvWklodmNOQVFFTEJRQXdOakVTTUJBR0ExVUUKQ3hNSmIzQmxibk5vYVdaME1TQXdIZ1lEVlFRREV4ZGhaRzFwYmkxcmRXSmxZMjl1Wm1sbkxYTnBaMjVsY2pBZQpGdzB5TXpFeE1UZ3dPRFUyTWpWYUZ3MHpNekV4TVRVd09EVTJNalZhTURBeEZ6QVZCZ05WQkFvVERuTjVjM1JsCmJUcHRZWE4wWlhKek1SVXdFd1lEVlFRREV3eHplWE4wWlcwNllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUMrcDJoSEV5UlRHdUZZdlo2VDVTTUdyMk0wREc0SzZidTZoZzJSYjhTSApZRXdJTUFNMTZVb1ZqWmVTcG9vVzF5WmtubnVvZ2NLeGkxZytTZUI3VkJYaWpWQnAwdTcrejFjMmRqRC9vUlJRCmNIK3ljREoyT1hScVJIYkdONjJKajBLYjNnUWFTVmxSRVp3V1JtT1o1TktneU90WDZERU5zUUlPWS85Z0pkZ0IKTzJ3a05EbzZtN25lRkNZV2lHV0gyVm9mOGIvTFZvNHVSTytTbmk5NHpQSjhFKzBkYXZaTVVqNGlUZUVvQml5SwovSGVneVRuV0pzVmk4cGsyOW1GQUNLMW9MaXZ1ck51YVBqVHY4ckdJY0VHVHVQZlQrcFJFTTd5WnNFWDkrSHRMCjM4OEIrdkx6dXNwNDFDRjc4Tmd1OEMxTUdaMFhZdU1Hd01rZXBaNTdRemE1QWdNQkFBR2pmekI5TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVUwb053OEUvMkxtMnI3dklHUHVNNE1jclg4WVF3SHdZRFZSMGpCQmd3CkZvQVVpVTZXRXp6NlhudGtuQ1JqRVV3clhVUGdXK1V3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUQ1c0tIK0kKRUJCYzRIcWVsL0VDTDh6eW5VZnBnWXdoN1hBZk1HNDZpMmY4T2NHdWU0TDRrbXdROHUxci9CNUhLMU93QUJUWQpCQVo5VUt5b0FlMW42RlF1Y21waFZzTjQ4Q3JMdzEyL1RxYnVTblcydGwxMmoxWXY1dmVzWXhwUGgzaEhOdlNGCjdNWktrT3dpQXdMWnFJdm42WnlLZUh4VUI1T1laTWtzbU5ITTU1R2tJWi9hMUVFT2NFY01VZUhyamVtaGs3QzkKTzVjdWdsTCtCSE5XWkJjZkthVHRhMFhCZ2tRNXFMMU42b3l0d3hmYlNaeUpCYTB4bHRFNWpNbmYzTlV5SFByWQorSzA4enZXTXRoeXlwM0VPeG5ZaS9sUTBVWlcxY0FFdncvTEVFU1YyS3JBdktFQ0VvV3lWRkVWQ0pTOXRlN2tFCmpkMzl3Qnd3WjltM3kwUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: |
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBdnFkb1J4TWtVeHJoV0wyZWsrVWpCcTlqTkF4dUN1bTd1b1lOa1cvRWgyQk1DREFECk5lbEtGWTJYa3FhS0Z0Y21aSjU3cUlIQ3NZdFlQa25nZTFRVjRvMVFhZEx1L3M5WE5uWXcvNkVVVUhCL3NuQXkKZGpsMGFrUjJ4amV0aVk5Q205NEVHa2xaVVJHY0ZrWmptZVRTb01qclYrZ3hEYkVDRG1QL1lDWFlBVHRzSkRRNgpPcHU1M2hRbUZvaGxoOWxhSC9HL3kxYU9Ma1R2a3A0dmVNenlmQlB0SFdyMlRGSStJazNoS0FZc2l2eDNvTWs1CjFpYkZZdktaTnZaaFFBaXRhQzRyN3F6Ym1qNDA3L0t4aUhCQms3ajMwL3FVUkRPOG1iQkYvZmg3UzkvUEFmcnkKODdyS2VOUWhlL0RZTHZBdFRCbWRGMkxqQnNESkhxV2VlME0ydVFJREFRQUJBb0lCQVFDdGpHUSs5cXpGUFozTwpFdVhzU05PbWZUYjNwU3p5b0N0ME1oemR1L2tSSmxadnlZelNvV2IvMGFFZExKNWRCa0o3cTB4emFwTlkzTGhhCkV4UFdFQWZQNzhVNFgzdVExaHJVaDZnNHVsOXNqY3VnR2NQRm5LMWRJcTlmNWtVQkNEaWcrK3VPSmlDNHpDZmkKbXZhRm15Y2tsMkNyNTcvbmI2Nm9mTngxb0YxTldEOHNsUDNpM0Y4QTdXcDA3VnhxZTdtd1czZlFYNXJ2UjJGSwpNWTdndjZRWDBhYzBlWFZqWGMxZjlMN2kzVEJnamppVnU0U2dnNk1RSkIwWWhBNEZUUFdkcjd1aHhWS2VrTVZVClp2UjF0NmVsTjNCT3B6ODlWNXc1ckxtZzE3VEZETzhPUDdHbTNvbWtMNHRPUWNaTmgzbktUS0ViL3VXbUxZZ1QKa1RLRzVzS0JBb0dCQVBLODBnWm5YeG1PL3dDZFlncDltcFRPYUtwNDVkVjFLeVIxUERRcHZkem9LalhLV0VXdwpHYVA0REVBVHdVTms5VTB2alZYMDdJMVVkNnNYVUdBRU45VEtNU1c5TFEzZmllWmRBejBZSHRIOEFkeWhqZlprCkhQaklMcnhvWnE1Y2hpY2VqSm5kTmQrcURvSjRlQVQrcUFUUFZaWXB2cEwyWkdFM0FqT3RNakNSQW9HQkFNa1MKRjA1Z0cyOHkvSUFZK3dhakdmS0FDdlcvZ2dXNWpNdUttM1VxSndNL2c4ZFNVSjNqZEVTa2ZJQTI3Y293UzFTegp4ZGVRWE9wRlhqOHRaOGUzbXFUM0s3eWZkaHpJUVJhMTNVL3ZWMlA2RnpKZ3JDVGcwYTdLVUcxN3FZRzdsaloyCmNidnpVVlNkOFEzMm5YMm50eWNsS3U2NlFCeEtVQlNaY1dZS2tqZXBBb0dCQU1jbm1JSGNpakFrSEtCYWdEZnYKT2NiaFd3cVN5cTlKeEszUzZpUTZJeVo5N1RQWTRuZTZ0aTdMc3ZGWHcvY1JmQmxwN0dJYjQ0RkpUaTIzb1NCRwpGYkNtZTVCbEYvUUw5YzVsZmVUQVIza3RkREdhOHlpMmx2YWU5NGxwZHVXVDBCV0VnUU0wZGFFZW0yejhmaXhLCjYzdVd5TGU5WkRpYm8xd0hqK3pxS3dXaEFvR0JBTEk1RU9OdG1LT21BOTNmUnBJSmUvUlF2bVk1UzV5YmJVcjEKSHZwcFZJOHllekh2cW5sb3BTUTYwQWd0cC9ReGZuUWpyTmQzcElRYTNJRVBWQS9ZbElCb2ZpSUJEZ1pSRWpCNQpIeU85T0M3ci9DZXhQS1NyaWZCdWIzKzd2dkc1UGxvai9vZmtFbEQ0ZGpRMFJrQ2NxbUZPTnBISUVRK0NaeHo3CkxXS1BPQytSQW9HQkFJSzVFbWptbVIxQkdDWWVBOTYxMWg2dmFFTno3UitKZWhpRjRQS2d3SC9YdExSL1FpNmgKMVNvVUM4MlByS3pGNWNHTDNDeTM2dUZpWG5RVnd1Yi8yUFpKNHk5NzI5SExaTHhtcXRPWG8xVTNsV2UwVi9EdwppWElnVHVBbGtCb2hjOGZSZ1kzOHc4WklvZldqQ1BGL043Y1hYZFBScFU1Rld4LzB2bnIvS01SOQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
